#include "main.h"
#include <string.h>
#define DEV_ADDR 0x10
#define LCD_ADDR 0x27
#define CRC_Mode 0
#define MAX_BUFFER_SIZE 10
#define NUM_CELLS 8
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;
uint8_t TX_2Byte[2] = {0x00, 0x00};
uint8_t TX_3Byte[3] = {0x00, 0x00, 0x00};
uint8_t TX_4Byte[4] = {0x00, 0x00, 0x00, 0x00};
uint8_t RX_2Byte[2] = {0x00, 0x00};
uint16_t CellVoltage[NUM_CELLS] = {0};
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2C2_Init(void);
void LCD_Init(void);
void LCD_SendCommand(uint8_t cmd);
void LCD_SendData(uint8_t data);
void LCD_Print(const char *str);
void LCD_Clear(void);
void LCD_SetCursor(uint8_t row, uint8_t col);
unsigned char Checksum(unsigned char *ptr, unsigned char len);
void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count);
int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count);
void AFE_Init(void);
uint16_t AFE_ReadCellVoltage(uint8_t channel);
void LCD_Init(void) {
 HAL_Delay(50);
 LCD_SendCommand(0x03);
 HAL_Delay(5);
 LCD_SendCommand(0x03);
 HAL_Delay(1);
 LCD_SendCommand(0x03);
 HAL_Delay(1);
 LCD_SendCommand(0x02);
 HAL_Delay(1);
 LCD_SendCommand(0x28);
 HAL_Delay(1);
 LCD_SendCommand(0x08);
 HAL_Delay(1);
 LCD_SendCommand(0x01);
 HAL_Delay(2);
 LCD_SendCommand(0x06);
 HAL_Delay(1);
 LCD_SendCommand(0x0C);
 HAL_Delay(1);
}
void LCD_SendCommand(uint8_t cmd) {
 uint8_t data[4];
 data[0] = (cmd & 0xF0) | 0x0C;
 data[1] = (cmd & 0xF0) | 0x08;
 data[2] = ((cmd << 4) & 0xF0) | 0x0C;
 data[3] = ((cmd << 4) & 0xF0) | 0x08;
 HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, data, 4, 100);
 HAL_Delay(1);
}
void LCD_SendData(uint8_t data) {
 uint8_t buf[4];
 buf[0] = (data & 0xF0) | 0x0D;
 buf[1] = (data & 0xF0) | 0x09;
 buf[2] = ((data << 4) & 0xF0) | 0x0D;
 buf[3] = ((data << 4) & 0xF0) | 0x09;
 HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR << 1, buf, 4, 100);
 HAL_Delay(1);
}
void LCD_Print(const char *str) {
 while (*str) {
 LCD_SendData(*str++);
 }
}
void LCD_Clear(void) {
LCD_SendCommand(0x01);
 HAL_Delay(2);
}
void LCD_SetCursor(uint8_t row, uint8_t col) {
 uint8_t address;
 if (row == 0) {
 address = 0x00 + col;
 } else if (row == 1) {
 address = 0x40 + col;
 } else {
 return;
 }
 LCD_SendCommand(0x80 | address);
}
unsigned char Checksum(unsigned char *ptr, unsigned char len) {
 unsigned char checksum = 0;
 for (unsigned char i = 0; i < len; i++) {
 checksum += ptr[i];
 }
 return (0xFF & ~checksum);
}
void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count) {
 HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, 1000);
}
int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count) {
 HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, 1000);
 return 0;
}
void AFE_Init(void) {
 TX_2Byte[0] = 0x90; TX_2Byte[1] = 0x00;
 I2C_WriteReg(0x3E, TX_2Byte, 2);
 HAL_Delay(2);
 TX_4Byte[0] = 0x34; TX_4Byte[1] = 0x92; TX_4Byte[2] = 0x82; TX_4Byte[3] = 0x2D;
 I2C_WriteReg(0x3E, TX_4Byte, 4);
 HAL_Delay(1);
 TX_2Byte[0] = Checksum(TX_4Byte, 4); TX_2Byte[1] = 0x06;
 I2C_WriteReg(0x60, TX_2Byte, 2);
 HAL_Delay(1);
 TX_3Byte[0] = 0x37; TX_3Byte[1] = 0x92; TX_
3Byte[2] = 0x01;
 I2C_WriteReg(0x3E, TX_3Byte, 3);
 HAL_Delay(1);
 TX_2Byte[0] = Checksum(TX_3Byte, 3); TX_2Byte[1] = 0x05;
 I2C_WriteReg(0x60, TX_2Byte, 2);
 HAL_Delay(1);
 TX_3Byte[0] = 0x36; TX_3Byte[1] = 0x92; TX_3Byte[2] = 0x0D;
 I2C_WriteReg(0x3E, TX_3Byte, 3);
 HAL_Delay(1);
 TX_2Byte[0] = Checksum(TX_3Byte, 3); TX_2Byte[1] = 0x05;
 I2C_WriteReg(0x60, TX_2Byte, 2);
 HAL_Delay(1);
 TX_4Byte[0] = 0x04; TX_4Byte[1] = 0x93; TX_4Byte[2] = 0xFF; TX_4Byte[3] = 0x00;
 I2C_WriteReg(0x3E, TX_4Byte, 4);
 HAL_Delay(1);
 TX_2Byte[0] = Checksum(TX_4Byte, 4); TX_2Byte[1] = 0x06;
 I2C_WriteReg(0x60, TX_2Byte, 2);
 HAL_Delay(1);
 TX_2Byte[0] = 0x92; TX_2Byte[1] = 0x00;
 I2C_WriteReg(0x3E, TX_2Byte, 2);
 HAL_Delay(1);
}
uint16_t AFE_ReadCellVoltage(uint8_t channel) {
 if (channel >= NUM_CELLS) return 0;
 I2C_ReadReg(channel * 2 + 0x12, RX_2Byte, 2);
 uint16_t voltage = (RX_2Byte[1] * 256 + RX_2Byte[0]);
 if (voltage == 0 || voltage > 5000) return 0;
 return voltage;
}
int main(void) {
 HAL_Init();
 SystemClock_Config();
 MX_GPIO_Init();
 MX_I2C1_Init();
 MX_I2C2_Init();
 LCD_Init();
 LCD_Print("BMS INITIALISE");
 HAL_Delay(10000);
 LCD_Clear();
 LCD_Print("MONITORING...");
 HAL_Delay(10000);
 LCD_Clear();
 AFE_Init();
 LCD_Print("Cell Voltages");
 HAL_Delay(10000);
 LCD_Clear();
 char buffer[16];
 while (1) {
 CellVoltage[0] = AFE_ReadCellVoltage(0);
 CellVoltage[1] = AFE_ReadCellVoltage(1);
 CellVoltage[2] = AFE_ReadCellVoltage(2);
 CellVoltage[3] = AFE_ReadCellVoltage(3);
 CellVoltage[4] = AFE_ReadCellVoltage(4);
 CellVoltage[5] = AFE_ReadCellVoltage(5);
 CellVoltage[6] = AFE_ReadCellVoltage(6);
 CellVoltage[7] = AFE_ReadCellVoltage(7);
 LCD_Clear();
 sprintf(buffer, "C1: %4u mV", CellVoltage[0]);
 LCD_Print(buffer);
 LCD_SetCursor(1,0);
 sprintf(buffer, "C2: %4u mV", CellVoltage[1]);
 LCD_Print(buffer);
 HAL_Delay(5000);
 LCD_Clear();
 sprintf(buffer, "C3: %4u mV", CellVoltage[2]);
 LCD_Print(buffer);
 LCD_SetCursor(1,0);
 sprintf(buffer, "C4: %4u mV", CellVoltage[3]);
 LCD_Print(buffer);
 HAL_Delay(5000);
 LCD_Clear();
 sprintf(buffer, "C5: %4u mV", CellVoltage[4]);
 LCD_Print(buffer);
 LCD_SetCursor(1,0);
 sprintf(buffer, "C6: %4u mV", CellVoltage[5]);
 LCD_Print(buffer);
 HAL_Delay(5000);
 LCD_Clear();
 sprintf(buffer, "C7: %4u mV", CellVoltage[6]);
 LCD_Print(buffer);
 LCD_SetCursor(1,0);
 sprintf(buffer, "C8: %4u mV", CellVoltage[7]);
 LCD_Print(buffer);
 HAL_Delay(5000);
 }
}
void SystemClock_Config(void) {
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 HAL_RCC_OscConfig(&RCC_OscInitStruct);
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 HAL_RCC_ NumberConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
}
static void MX_I2C1_Init(void) {
 hi2c1.Instance = I2C1;
 hi2c1.Init.ClockSpeed = 400000;
 hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 hi2c1.Init.OwnAddress1 = 0;
 hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 hi2c1.Init.OwnAddress2 = 0;
 hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 Error_Handler();
 }
}
static void MX_I2C2_Init(void) {
 hi2c2.Instance = I2C2;
 hi2c2.Init.ClockSpeed = 100000;
 hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 hi2c2.Init.OwnAddress1 = 0;
 hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 hi2c2.Init.OwnAddress2 = 0;
 hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 Error_Handler();
 }
}
static void MX_GPIO_Init(void) {
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 __HAL_RCC_GPIOA_CLK_ENABLE();
 __HAL_RCC_GPIOB_CLK_ENABLE();
 GPIO_InitStruct.Pin = GPIO_PIN_0;
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 HAL_NVIC_EnableIRQ(EXTI0_IRQn);
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 if (GPIO_Pin == GPIO_PIN_0) {
 LCD_Clear();
 LCD_Print("ALERT Triggered");
 HAL_Delay(1000);
 }
}
void Error_Handler(void) {
 while (1) {
 }
}
#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line) {
 while (1) {
 }
}
#endif
